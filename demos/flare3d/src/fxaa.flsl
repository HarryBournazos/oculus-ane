use namespace flare;
use namespace flare.transforms;
use namespace flare.filters;

/////////////////////////////////////////////////////////////////////////////////////
//
// FXAA postprocessing shader
//
// Based on :
// http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf
//
// Tommy Svensson / Expology
//
/////////////////////////////////////////////////////////////////////////////////////

#define FXAA_SPAN_MAX 8				// Try adjusting this for better AA with near straight lines
#define FXAA_REDUCE_MUL 0.1 		// (1.0/10.0)
#define FXAA_REDUCE_MIN 0.0078125 	// (1.0/128.0)

// Params ///////////////////////////////////////////////////////////////////////////

param float4 strength = 1;
param float2 resolution = float2(1024,1024);
sampler2D targetBuffer <mip = 0, wrap = 0>;

//===================================================================================
// Main
//-----------------------------------------------------------------------------------

technique fxaa
{ 
	float2 inverse_resolution=float2(1.0/resolution.x,1.0/resolution.y);
	float3 rgbNW = sampler2D(targetBuffer, iUV0 + (const(-1.0, -1.0) * inverse_resolution)).xyz;
	float3 rgbNE = sampler2D(targetBuffer, iUV0 + (const(+1.0, -1.0) * inverse_resolution)).xyz;
	float3 rgbSW = sampler2D(targetBuffer, iUV0 + (const(-1.0, +1.0) * inverse_resolution)).xyz;
	float3 rgbSE = sampler2D(targetBuffer, iUV0 + (const(+1.0, +1.0) * inverse_resolution)).xyz;
	float3 rgbM  = sampler2D(targetBuffer, iUV0).xyz;

	float3 luma = const(0.299, 0.587, 0.114);
	float lumaNW = dot(rgbNW, luma);
	float lumaNE = dot(rgbNE, luma);
	float lumaSW = dot(rgbSW, luma);
	float lumaSE = dot(rgbSE, luma);
	float lumaM  = dot(rgbM,  luma);

	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
	
	float2 dir;
	dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
	dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));	
	
	float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * const(0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
	float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);

	dir = min(float2(FXAA_SPAN_MAX,  FXAA_SPAN_MAX), max(float2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * inverse_resolution;
	
	float3 rgbA = const(1.0/2.0) * ( sampler2D(targetBuffer, iUV0 + dir * const(1.0/3.0 - 0.5)).xyz + sampler2D(targetBuffer, iUV0 + dir * const(2.0/3.0 - 0.5)).xyz);
	float3 rgbB = rgbA * const(1.0/2.0) + const(1.0/4.0) * ( sampler2D(targetBuffer, iUV0 + dir * const(0.0/3.0 - 0.5)).xyz + sampler2D(targetBuffer, iUV0 + dir * const(3.0/3.0 - 0.5)).xyz);
	float lumaB = dot(rgbB, luma);
  
	float lumTest = ((lumaB < lumaMin) || (lumaB > lumaMax));
	float3 color = (rgbA*lumTest) + ((rgbB*(1-lumTest)));
  
	output vertex = position.xyzw;
	output fragment = float4(lerp(rgbM.xyz,color,strength.xxx),1)
}
